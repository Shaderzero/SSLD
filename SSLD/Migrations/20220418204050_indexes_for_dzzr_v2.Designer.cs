// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SSLD.Data;

#nullable disable

namespace SSLD.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220418204050_indexes_for_dzzr_v2")]
    partial class indexes_for_dzzr_v2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DailyReviewName")
                        .HasColumnType("text")
                        .HasColumnName("daily_review_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<List<string>>("Names")
                        .HasColumnType("text[]")
                        .HasColumnName("names");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.FileTypeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AllocatedValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("allocated_value_entry");

                    b.Property<List<string>>("CountryEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("country_entry");

                    b.Property<List<string>>("DataEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("data_entry");

                    b.Property<List<string>>("EstimatedValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("estimated_value_entry");

                    b.Property<List<string>>("FactValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("fact_value_entry");

                    b.Property<List<string>>("GisEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("gis_entry");

                    b.Property<List<string>>("MustHave")
                        .HasColumnType("text[]")
                        .HasColumnName("must_have");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("NotHave")
                        .HasColumnType("text[]")
                        .HasColumnName("not_have");

                    b.Property<List<string>>("RequestedValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("requested_value_entry");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_file_type_settings");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_file_type_settings_name");

                    b.ToTable("file_type_settings", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.Gis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DailyReviewName")
                        .HasColumnType("text")
                        .HasColumnName("daily_review_name");

                    b.Property<int>("DailyReviewOrder")
                        .HasColumnType("integer")
                        .HasColumnName("daily_review_order");

                    b.Property<List<string>>("GisInputNames")
                        .HasColumnType("text[]")
                        .HasColumnName("gis_input_names");

                    b.Property<List<string>>("GisOutputNames")
                        .HasColumnType("text[]")
                        .HasColumnName("gis_output_names");

                    b.Property<bool>("IsBottom")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bottom");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<bool>("IsNoPhg")
                        .HasColumnType("boolean")
                        .HasColumnName("is_no_phg");

                    b.Property<bool>("IsNotCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_not_calculated");

                    b.Property<bool>("IsOneRow")
                        .HasColumnType("boolean")
                        .HasColumnName("is_one_row");

                    b.Property<bool>("IsTop")
                        .HasColumnType("boolean")
                        .HasColumnName("is_top");

                    b.Property<bool>("IsUkraineTransport")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ukraine_transport");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("Names")
                        .HasColumnType("text[]")
                        .HasColumnName("names");

                    b.HasKey("Id")
                        .HasName("pk_gises");

                    b.ToTable("gises", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisAddon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DailyReviewName")
                        .HasColumnType("text")
                        .HasColumnName("daily_review_name");

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<bool>("IsInput")
                        .HasColumnType("boolean")
                        .HasColumnName("is_input");

                    b.Property<bool>("IsOutput")
                        .HasColumnType("boolean")
                        .HasColumnName("is_output");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("Names")
                        .HasColumnType("text[]")
                        .HasColumnName("names");

                    b.HasKey("Id")
                        .HasName("pk_gis_addons");

                    b.HasIndex("GisId")
                        .HasDatabaseName("ix_gis_addons_gis_id");

                    b.ToTable("gis_addons", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisAddonValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("allocated_value");

                    b.Property<long?>("AllocatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("estimated_value");

                    b.Property<long?>("EstimatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("fact_value");

                    b.Property<long?>("FactValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisAddonId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_addon_id");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date")
                        .HasColumnName("report_date");

                    b.Property<decimal>("RequestedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("requested_value");

                    b.Property<long?>("RequestedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("requested_value_time_id");

                    b.HasKey("Id")
                        .HasName("pk_gis_addon_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_fact_value_time_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_requested_value_time_id");

                    b.HasIndex("GisAddonId", "ReportDate")
                        .IsUnique()
                        .HasDatabaseName("ix_gis_addon_values_gis_addon_id_report_date");

                    b.ToTable("gis_addon_values", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<bool>("IsNotCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_not_calculated");

                    b.HasKey("Id")
                        .HasName("pk_gis_countries");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_gis_countries_country_id");

                    b.HasIndex("GisId", "CountryId")
                        .IsUnique()
                        .HasDatabaseName("ix_gis_countries_gis_id_country_id");

                    b.ToTable("gis_countries", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DailyReviewName")
                        .HasColumnType("text")
                        .HasColumnName("daily_review_name");

                    b.Property<int>("GisCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_id");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<List<string>>("Names")
                        .HasColumnType("text[]")
                        .HasColumnName("names");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_addons");

                    b.HasIndex("GisCountryId")
                        .HasDatabaseName("ix_gis_country_addons_gis_country_id");

                    b.ToTable("gis_country_addons", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GisCountryAddonId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_addon_id");

                    b.Property<bool>("IsCommGas")
                        .HasColumnType("boolean")
                        .HasColumnName("is_comm_gas");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_addon_types");

                    b.HasIndex("GisCountryAddonId")
                        .HasDatabaseName("ix_gis_country_addon_types_gis_country_addon_id");

                    b.ToTable("gis_country_addon_types", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddonValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("allocated_value");

                    b.Property<long?>("AllocatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("estimated_value");

                    b.Property<long?>("EstimatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("fact_value");

                    b.Property<long?>("FactValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisCountryAddonId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_addon_id");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date")
                        .HasColumnName("report_date");

                    b.Property<decimal>("RequestedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("requested_value");

                    b.Property<long?>("RequestedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("requested_value_time_id");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_addon_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_country_addon_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_country_addon_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_country_addon_values_fact_value_time_id");

                    b.HasIndex("GisCountryAddonId")
                        .HasDatabaseName("ix_gis_country_addon_values_gis_country_addon_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_country_addon_values_requested_value_time_id");

                    b.ToTable("gis_country_addon_values", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GisCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_id");

                    b.Property<DateOnly>("Month")
                        .HasColumnType("date")
                        .HasColumnName("month");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_resources");

                    b.HasIndex("GisCountryId", "Month")
                        .IsUnique()
                        .HasDatabaseName("ix_gis_country_resources_gis_country_id_month");

                    b.ToTable("gis_country_resources", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("allocated_value");

                    b.Property<long?>("AllocatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("estimated_value");

                    b.Property<long?>("EstimatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("fact_value");

                    b.Property<long?>("FactValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_id");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date")
                        .HasColumnName("report_date");

                    b.Property<decimal>("RequestedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("requested_value");

                    b.Property<long?>("RequestedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("requested_value_time_id");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_fact_value_time_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_requested_value_time_id");

                    b.HasIndex("GisCountryId", "ReportDate")
                        .IsUnique()
                        .HasDatabaseName("ix_gis_country_values_gis_country_id_report_date");

                    b.ToTable("gis_country_values", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisInputValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("allocated_value");

                    b.Property<long?>("AllocatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("estimated_value");

                    b.Property<long?>("EstimatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("fact_value");

                    b.Property<long?>("FactValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date")
                        .HasColumnName("report_date");

                    b.Property<decimal>("RequestedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("requested_value");

                    b.Property<long?>("RequestedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("requested_value_time_id");

                    b.HasKey("Id")
                        .HasName("pk_gis_input_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_input_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_input_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_input_values_fact_value_time_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_input_values_requested_value_time_id");

                    b.HasIndex("GisId", "ReportDate")
                        .IsUnique()
                        .HasDatabaseName("ix_gis_input_values_gis_id_report_date");

                    b.ToTable("gis_input_values", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisOutputValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("allocated_value");

                    b.Property<long?>("AllocatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("estimated_value");

                    b.Property<long?>("EstimatedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("fact_value");

                    b.Property<long?>("FactValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date")
                        .HasColumnName("report_date");

                    b.Property<decimal>("RequestedValue")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("requested_value");

                    b.Property<long?>("RequestedValueTimeId")
                        .HasColumnType("bigint")
                        .HasColumnName("requested_value_time_id");

                    b.HasKey("Id")
                        .HasName("pk_gis_output_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_output_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_output_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_output_values_fact_value_time_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_output_values_requested_value_time_id");

                    b.HasIndex("GisId", "ReportDate")
                        .IsUnique()
                        .HasDatabaseName("ix_gis_output_values_gis_id_report_date");

                    b.ToTable("gis_output_values", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.InputFileLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("FileDate")
                        .HasColumnType("date")
                        .HasColumnName("file_date");

                    b.Property<DateTime>("FileTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("file_time");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<DateTime>("InputTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("input_time");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_input_files_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_input_files_logs_user_id");

                    b.ToTable("input_files_logs", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorGis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_operator_gises");

                    b.ToTable("operator_gises", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("OperatorGisId")
                        .HasColumnType("integer")
                        .HasColumnName("operator_gis_id");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("report_date");

                    b.Property<DateOnly>("SupplyDate")
                        .HasColumnType("date")
                        .HasColumnName("supply_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_operator_resources");

                    b.HasIndex("OperatorGisId")
                        .HasDatabaseName("ix_operator_resources_operator_gis_id");

                    b.HasIndex("ReportDate")
                        .HasDatabaseName("ix_operator_resources_report_date");

                    b.HasIndex("SupplyDate")
                        .HasDatabaseName("ix_operator_resources_supply_date");

                    b.ToTable("operator_resources", (string)null);
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorResourceHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Hour")
                        .HasColumnType("integer")
                        .HasColumnName("hour");

                    b.Property<long>("OperatorResourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("operator_resource_id");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric(16,8)")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_operator_resource_hours");

                    b.HasIndex("OperatorResourceId", "Hour")
                        .IsUnique()
                        .HasDatabaseName("ix_operator_resource_hours_operator_resource_id_hour");

                    b.ToTable("operator_resource_hours", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SSLD.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SSLD.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("SSLD.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SSLD.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisAddon", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.Gis", "Gis")
                        .WithMany("Addons")
                        .HasForeignKey("GisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_addons_gises_gis_id");

                    b.Navigation("Gis");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisAddonValue", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_files_logs_allocated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_files_logs_estimated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_files_logs_fact_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.GisAddon", "GisAddon")
                        .WithMany("Values")
                        .HasForeignKey("GisAddonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_addon_values_gis_addons_gis_addon_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_files_logs_requested_value_time_id");

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("GisAddon");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountry", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.Country", "Country")
                        .WithMany("GisCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_countries_countries_country_id");

                    b.HasOne("SSLD.Data.DailyReview.Gis", "Gis")
                        .WithMany("Countries")
                        .HasForeignKey("GisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_countries_gises_gis_id");

                    b.Navigation("Country");

                    b.Navigation("Gis");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddon", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.GisCountry", "GisCountry")
                        .WithMany("Addons")
                        .HasForeignKey("GisCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_country_addons_gis_countries_gis_country_id");

                    b.Navigation("GisCountry");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddonType", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.GisCountryAddon", "GisCountryAddon")
                        .WithMany("Types")
                        .HasForeignKey("GisCountryAddonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_country_addon_types_gis_country_addons_gis_country_addo");

                    b.Navigation("GisCountryAddon");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddonValue", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_country_addon_values_input_files_logs_allocated_value_t");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_country_addon_values_input_files_logs_estimated_value_t");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_country_addon_values_input_files_logs_fact_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.GisCountryAddon", "GisCountryAddon")
                        .WithMany("Values")
                        .HasForeignKey("GisCountryAddonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_country_addon_values_gis_country_addons_gis_country_add");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_country_addon_values_input_files_logs_requested_value_t");

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("GisCountryAddon");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryResource", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.GisCountry", "GisCountry")
                        .WithMany("Resources")
                        .HasForeignKey("GisCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_country_resources_gis_countries_gis_country_id");

                    b.Navigation("GisCountry");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryValue", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_files_logs_allocated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_files_logs_estimated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_files_logs_fact_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.GisCountry", "GisCountry")
                        .WithMany("Values")
                        .HasForeignKey("GisCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_country_values_gis_countries_gis_country_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_files_logs_requested_value_time_id");

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("GisCountry");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisInputValue", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_input_values_input_files_logs_allocated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_input_values_input_files_logs_estimated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_input_values_input_files_logs_fact_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.Gis", "Gis")
                        .WithMany("GisInputValues")
                        .HasForeignKey("GisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_input_values_gises_gis_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_input_values_input_files_logs_requested_value_time_id");

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("Gis");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisOutputValue", b =>
                {
                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_output_values_input_files_logs_allocated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_output_values_input_files_logs_estimated_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_output_values_input_files_logs_fact_value_time_id");

                    b.HasOne("SSLD.Data.DailyReview.Gis", "Gis")
                        .WithMany("GisOutputValues")
                        .HasForeignKey("GisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gis_output_values_gises_gis_id");

                    b.HasOne("SSLD.Data.DailyReview.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_output_values_input_files_logs_requested_value_time_id");

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("Gis");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.InputFileLog", b =>
                {
                    b.HasOne("SSLD.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_input_files_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorResource", b =>
                {
                    b.HasOne("SSLD.Data.DZZR.OperatorGis", "OperatorGis")
                        .WithMany("Resources")
                        .HasForeignKey("OperatorGisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operator_resources_operator_gises_operator_gis_id");

                    b.Navigation("OperatorGis");
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorResourceHour", b =>
                {
                    b.HasOne("SSLD.Data.DZZR.OperatorResource", "OperatorResource")
                        .WithMany("Hours")
                        .HasForeignKey("OperatorResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operator_resource_hours_operator_resources_operator_resourc");

                    b.Navigation("OperatorResource");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.Country", b =>
                {
                    b.Navigation("GisCountries");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.Gis", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("Countries");

                    b.Navigation("GisInputValues");

                    b.Navigation("GisOutputValues");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisAddon", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountry", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("Resources");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("SSLD.Data.DailyReview.GisCountryAddon", b =>
                {
                    b.Navigation("Types");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorGis", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("SSLD.Data.DZZR.OperatorResource", b =>
                {
                    b.Navigation("Hours");
                });
#pragma warning restore 612, 618
        }
    }
}
